commit 37632175f29028f1e5fff08a2d5d8e3b308dc671
Author: Uwe <donovaly@users.noreply.github.com>
Date:   Tue Oct 11 01:44:24 2022 +0200

    use explicit prefix std:: for vectors
    
    - also add potentially missing include
    - this commit is an attempt to fix #7585

diff --git a/src/3rdParty/salomesmesh/src/StdMeshers/StdMeshers_CartesianParameters3D.cpp b/src/3rdParty/salomesmesh/src/StdMeshers/StdMeshers_CartesianParameters3D.cpp
index 89209825aa..3e3686c7f7 100644
--- a/src/3rdParty/salomesmesh/src/StdMeshers/StdMeshers_CartesianParameters3D.cpp
+++ b/src/3rdParty/salomesmesh/src/StdMeshers/StdMeshers_CartesianParameters3D.cpp
@@ -191,7 +191,7 @@ void StdMeshers_CartesianParameters3D::SetGrid(std::vector<double>& coords, int
 //purpose  : Set grid spacing along the three axes
 //=======================================================================
 
-void StdMeshers_CartesianParameters3D::SetGridSpacing(std::vector<string>& xSpaceFuns,
+void StdMeshers_CartesianParameters3D::SetGridSpacing(std::vector<std::string>& xSpaceFuns,
                                                       std::vector<double>& xInternalPoints,
                                                       const int            axis)
 {
diff --git a/src/App/PropertyLinks.cpp b/src/App/PropertyLinks.cpp
index 9c1058da8c..acf200e253 100644
--- a/src/App/PropertyLinks.cpp
+++ b/src/App/PropertyLinks.cpp
@@ -1780,7 +1780,7 @@ void PropertyLinkSubList::setValues(std::vector<DocumentObject*>&& lValue,
     hasSetValue();
 }
 
-void PropertyLinkSubList::setValue(DocumentObject* lValue, const std::vector<string> &SubList)
+void PropertyLinkSubList::setValue(DocumentObject* lValue, const std::vector<std::string> &SubList)
 {
     auto parent = dynamic_cast<App::DocumentObject*>(getContainer());
     verifyObject(lValue, parent);
@@ -3983,7 +3983,7 @@ void PropertyXLinkSubList::addValue(App::DocumentObject *obj,
     guard.tryInvoke();
 }
 
-void PropertyXLinkSubList::setValue(DocumentObject* lValue, const std::vector<string> &SubList)
+void PropertyXLinkSubList::setValue(DocumentObject *lValue, const std::vector<std::string> &SubList)
 {
     std::map<DocumentObject *, std::vector<std::string> > values;
     if(lValue)
diff --git a/src/Mod/Fem/App/FemMesh.cpp b/src/Mod/Fem/App/FemMesh.cpp
index 909b26fa39..df83d71b82 100644
--- a/src/Mod/Fem/App/FemMesh.cpp
+++ b/src/Mod/Fem/App/FemMesh.cpp
@@ -1171,7 +1171,7 @@ class GRIDFreeFieldElement : public GRIDElement {
     void read(const std::string& str, const std::string&) {
         char_separator<char> sep(",");
         tokenizer<char_separator<char> > tokens(str, sep);
-        std::vector<string> token_results;
+        std::vector<std::string> token_results;
         token_results.assign(tokens.begin(),tokens.end());
         if (token_results.size() < 6)
             return;//Line does not include Nodal coordinates
@@ -1225,7 +1225,7 @@ public:
     void read(const std::string& str, const std::string&) {
         char_separator<char> sep(",");
         tokenizer<char_separator<char> > tokens(str, sep);
-        std::vector<string> token_results;
+        std::vector<std::string> token_results;
         token_results.assign(tokens.begin(),tokens.end());
         if (token_results.size() < 6)
             return;//Line does not include enough nodal IDs
@@ -1295,7 +1295,7 @@ public:
     void read(const std::string& str, const std::string&) {
         char_separator<char> sep(",");
         tokenizer<char_separator<char> > tokens(str, sep);
-        std::vector<string> token_results;
+        std::vector<std::string> token_results;
         token_results.assign(tokens.begin(),tokens.end());
         if (token_results.size() < 14)
             return;//Line does not include enough nodal IDs
diff --git a/src/Mod/Fem/App/FemMeshShapeObject.cpp b/src/Mod/Fem/App/FemMeshShapeObject.cpp
index 81ba8e30d2..3e0a615656 100644
--- a/src/Mod/Fem/App/FemMeshShapeObject.cpp
+++ b/src/Mod/Fem/App/FemMeshShapeObject.cpp
@@ -28,6 +28,7 @@
 # include <BRepBuilderAPI_Copy.hxx>
 # include <BRepTools.hxx>
 # include <SMESH_Gen.hxx>
+# include <SMESH_Mesh.hxx>
 # include <StdMeshers_MaxLength.hxx>
 # include <StdMeshers_LocalLength.hxx>
 # include <StdMeshers_MaxElementArea.hxx>
@@ -60,7 +61,9 @@ PROPERTY_SOURCE(Fem::FemMeshShapeObject, Fem::FemMeshObject)
 
 FemMeshShapeObject::FemMeshShapeObject()
 {
-    ADD_PROPERTY_TYPE(Shape,(nullptr), "FEM Mesh",Prop_None,"Geometry object, the mesh is made from. The geometry object has to have a Shape.");
+    ADD_PROPERTY_TYPE(
+        Shape, (nullptr), "FEM Mesh", Prop_None,
+        "Geometry object, the mesh is made from. The geometry object has to have a Shape.");
 }
 
 FemMeshShapeObject::~FemMeshShapeObject()
diff --git a/src/Mod/PartDesign/Gui/Command.cpp b/src/Mod/PartDesign/Gui/Command.cpp
index 59a9ff7b9c..7a6dae254a 100644
--- a/src/Mod/PartDesign/Gui/Command.cpp
+++ b/src/Mod/PartDesign/Gui/Command.cpp
@@ -981,7 +981,7 @@ unsigned validateSketches(std::vector<App::DocumentObject*>& sketches,
 void prepareProfileBased(PartDesign::Body *pcActiveBody, Gui::Command* cmd, const std::string& which,
                         boost::function<void (Part::Feature*, App::DocumentObject*)> func)
 {
-    auto base_worker = [=](App::DocumentObject* feature, const std::vector<string> &subs) {
+    auto base_worker = [=](App::DocumentObject *feature, const std::vector<std::string> &subs) {
 
         if (!feature || !feature->isDerivedFrom(Part::Feature::getClassTypeId()))
             return;
